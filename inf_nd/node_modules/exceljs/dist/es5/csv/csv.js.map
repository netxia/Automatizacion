{"version":3,"sources":["../../../lib/csv/csv.js"],"names":["fs","require","csv","dayjs","StreamBuf","utils","CSV","module","exports","workbook","worksheet","SpecialValues","error","prototype","readFile","filename","options","self","exists","Error","stream","createReadStream","read","close","Promise","resolve","reject","csvStream","createInputStream","on","pipe","addWorksheet","sheetName","dateFormats","ISO_8601","map","datum","datumNumber","Number","isNaN","dt","isValid","Date","valueOf","special","undefined","data","addRow","emit","write","getWorksheet","sheetId","createWriteStream","dateFormat","dateUTC","value","text","hyperlink","formula","result","utc","format","JSON","stringify","includeEmptyRows","lastRow","eachRow","row","rowNumber","values","shift","end","writeFile","streamOptions","encoding","writeBuffer"],"mappings":"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","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst csv = require('fast-csv');\nconst dayjs = require('dayjs');\nconst StreamBuf = require('../utils/stream-buf');\n\nconst utils = require('../utils/utils');\n\nconst CSV = (module.exports = function(workbook) {\n  this.workbook = workbook;\n  this.worksheet = null;\n});\n\n/* eslint-disable quote-props */\nconst SpecialValues = {\n  true: true,\n  false: false,\n  '#N/A': {error: '#N/A'},\n  '#REF!': {error: '#REF!'},\n  '#NAME?': {error: '#NAME?'},\n  '#DIV/0!': {error: '#DIV/0!'},\n  '#NULL!': {error: '#NULL!'},\n  '#VALUE!': {error: '#VALUE!'},\n  '#NUM!': {error: '#NUM!'},\n};\n/* eslint-ensable quote-props */\n\nCSV.prototype = {\n  async readFile(filename, options) {\n    const self = this;\n    options = options || {};\n    if (!(await utils.fs.exists(filename))) {\n      throw new Error(`File not found: ${filename}`);\n    }\n    const stream = fs.createReadStream(filename);\n    const worksheet = await self.read(stream, options);\n    stream.close();\n    return worksheet;\n  },\n  read(stream, options) {\n    options = options || {};\n    return new Promise((resolve, reject) => {\n      const csvStream = this.createInputStream(options)\n        .on('worksheet', resolve)\n        .on('error', reject);\n\n      stream.pipe(csvStream);\n    });\n  },\n  createInputStream(options) {\n    options = options || {};\n    const worksheet = this.workbook.addWorksheet(options.sheetName);\n\n    const dateFormats = options.dateFormats || [dayjs.ISO_8601, 'MM-DD-YYYY', 'YYYY-MM-DD'];\n    const map =\n      options.map ||\n      function(datum) {\n        if (datum === '') {\n          return null;\n        }\n        const datumNumber = Number(datum);\n        if (!Number.isNaN(datumNumber)) {\n          return datumNumber;\n        }\n        const dt = dayjs(datum, dateFormats, true);\n        if (dt.isValid()) {\n          return new Date(dt.valueOf());\n        }\n        const special = SpecialValues[datum];\n        if (special !== undefined) {\n          return special;\n        }\n        return datum;\n      };\n\n    const csvStream = csv(options)\n      .on('data', data => {\n        worksheet.addRow(data.map(map));\n      })\n      .on('end', () => {\n        csvStream.emit('worksheet', worksheet);\n      });\n    return csvStream;\n  },\n\n  write(stream, options) {\n    return new Promise((resolve, reject) => {\n      options = options || {};\n      // const encoding = options.encoding || 'utf8';\n      // const separator = options.separator || ',';\n      // const quoteChar = options.quoteChar || '\\'';\n\n      const worksheet = this.workbook.getWorksheet(options.sheetName || options.sheetId);\n\n      const csvStream = csv.createWriteStream(options);\n      stream.on('finish', () => {\n        resolve();\n      });\n      csvStream.on('error', reject);\n      csvStream.pipe(stream);\n\n      const {dateFormat, dateUTC} = options;\n      const map =\n        options.map ||\n        (value => {\n          if (value) {\n            if (value.text || value.hyperlink) {\n              return value.hyperlink || value.text || '';\n            }\n            if (value.formula || value.result) {\n              return value.result || '';\n            }\n            if (value instanceof Date) {\n              if (dateFormat) {\n                return dateUTC ? dayjs.utc(value).format(dateFormat) : dayjs(value).format(dateFormat);\n              }\n              return dateUTC ? dayjs.utc(value).format() : dayjs(value).format();\n            }\n            if (value.error) {\n              return value.error;\n            }\n            if (typeof value === 'object') {\n              return JSON.stringify(value);\n            }\n          }\n          return value;\n        });\n\n      const includeEmptyRows = options.includeEmptyRows === undefined || options.includeEmptyRows;\n      let lastRow = 1;\n      if (worksheet) {\n        worksheet.eachRow((row, rowNumber) => {\n          if (includeEmptyRows) {\n            while (lastRow++ < rowNumber - 1) {\n              csvStream.write([]);\n            }\n          }\n          const {values} = row;\n          values.shift();\n          csvStream.write(values.map(map));\n          lastRow = rowNumber;\n        });\n      }\n      csvStream.end();\n    });\n  },\n  writeFile(filename, options) {\n    options = options || {};\n\n    const streamOptions = {\n      encoding: options.encoding || 'utf8',\n    };\n    const stream = fs.createWriteStream(filename, streamOptions);\n\n    return this.write(stream, options);\n  },\n  async writeBuffer(options) {\n    const self = this;\n    const stream = new StreamBuf();\n    await self.write(stream, options);\n    return stream.read();\n  },\n};\n"],"file":"csv.js"}